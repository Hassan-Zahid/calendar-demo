{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["setOptions","theme","themeVariant","now","Date","defaultEvents","id","start","getFullYear","getMonth","end","title","color","getDate","viewSettings","schedule","type","responsivePopup","medium","display","width","fullScreen","touchUi","App","React","useState","view","setView","setEvents","myEvents","setMyEvents","tempEvent","setTempEvent","isOpen","setOpen","isEdit","setEdit","anchor","setAnchor","startRef","endRef","popupEventTitle","setTitle","popupEventDescription","setDescription","popupEventAllDay","setAllDay","popupEventDate","setDate","popupEventStatus","setStatus","mySelectedDate","setSelectedDate","saveEvent","useCallback","newEvent","description","allDay","status","index","findIndex","x","newEventList","splice","deleteEvent","event","filter","item","setTimeout","snackbar","button","action","prevEvents","text","message","loadPopupForm","titleChange","ev","target","value","descriptionChange","allDayChange","checked","dateChange","args","statusChange","onDeleteClick","onSelectedDateChange","date","onEventClick","domEvent","onEventCreated","onEventDeleted","onEventUpdated","controls","useMemo","responsiveOptions","headerText","popupButtons","handler","keyCode","cssClass","onClose","useEffect","getJson","events","calendar","labels","calView","setCalView","changeView","className","dragToMove","dragToResize","data","Fragment","onChange","style","contentPadding","buttons","responsive","label","ref","select","startInput","endInput","showRangeLabels","variant","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.702d8f87.chunk.js","sourcesContent":["import React from \"react\";\nimport { Eventcalendar, getJson, snackbar, Popup, Button, Input, Textarea, Switch, Datepicker, toast, setOptions, CalendarNav, SegmentedGroup, SegmentedItem, CalendarPrev, CalendarToday, CalendarNext } from '@mobiscroll/react';\nimport \"@mobiscroll/react/dist/css/mobiscroll.min.css\";\nimport './App.css';\n\n\nsetOptions({\n    theme: 'ios',\n    themeVariant: 'light'\n});\n\nconst now = new Date();\nconst defaultEvents = [{\n    id: 1,\n    start: new Date(now.getFullYear(), now.getMonth(), 8, 13),\n    end: new Date(now.getFullYear(), now.getMonth(), 8, 13, 30),\n    title: 'Lunch @ Butcher\\'s',\n    color: '#26c57d'\n}, {\n    id: 2,\n    start: new Date(now.getFullYear(), now.getMonth(), now.getDate(), 15),\n    end: new Date(now.getFullYear(), now.getMonth(), now.getDate(), 16),\n    title: 'General orientation',\n    color: '#fd966a'\n}, {\n    id: 3,\n    start: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 1, 18),\n    end: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 1, 22),\n    title: 'Dexter BD',\n    color: '#37bbe4'\n}, {\n    id: 4,\n    start: new Date(now.getFullYear(), now.getMonth(), now.getDate() + 1, 10, 30),\n    end: new Date(now.getFullYear(), now.getMonth(), now.getDate() + 1, 11, 30),\n    title: 'Stakeholder mtg.',\n    color: '#d00f0f'\n}];\nconst viewSettings = {\n    schedule: { type: 'week' }\n};\nconst responsivePopup = {\n    medium: {\n        display: 'anchored',\n        width: 400,\n        fullScreen: false,\n        touchUi: false\n    }\n};\n\nfunction App() {\n    \n\n    const [view, setView] = React.useState('week');\n    const [Events, setEvents] = React.useState([]);\n    const [myEvents, setMyEvents] = React.useState(defaultEvents);\n    const [tempEvent, setTempEvent] = React.useState(null);\n    const [isOpen, setOpen] = React.useState(false);\n    const [isEdit, setEdit] = React.useState(false);\n    const [anchor, setAnchor] = React.useState(null);\n    const [start, startRef] = React.useState(null);\n    const [end, endRef] = React.useState(null);\n    const [popupEventTitle, setTitle] = React.useState('');\n    const [popupEventDescription, setDescription] = React.useState('');\n    const [popupEventAllDay, setAllDay] = React.useState(true);\n    const [popupEventDate, setDate] = React.useState([]);\n    const [popupEventStatus, setStatus] = React.useState('busy');\n    const [mySelectedDate, setSelectedDate] = React.useState(now);\n\n\n    const saveEvent = React.useCallback(() => {\n        const newEvent = {\n            id: tempEvent.id,\n            title: popupEventTitle,\n            description: popupEventDescription,\n            start: popupEventDate[0],\n            end: popupEventDate[1],\n            allDay: popupEventAllDay,\n            status: popupEventStatus,\n            color: tempEvent.color\n        };\n        if (isEdit) {\n            // update the event in the list\n            const index = myEvents.findIndex(x => x.id === tempEvent.id);;\n            const newEventList = [...myEvents];\n\n            newEventList.splice(index, 1, newEvent);\n            setMyEvents(newEventList);\n            // here you can update the event in your storage as well\n            // ...\n        } else {\n            // add the new event to the list\n            setMyEvents([...myEvents, newEvent]);\n            // here you can add the event to your storage as well\n            // ...\n        }\n        setSelectedDate(popupEventDate[0]);\n        // close the popup\n        setOpen(false);\n    }, [isEdit, myEvents, popupEventAllDay, popupEventDate, popupEventDescription, popupEventStatus, popupEventTitle, tempEvent]);\n\n    const deleteEvent = React.useCallback((event) => {\n        setMyEvents(myEvents.filter(item => item.id !== event.id));\n        setTimeout(() => {\n            snackbar({\n                button: {\n                    action: () => {\n                        setMyEvents(prevEvents => [...prevEvents, event]);\n                    },\n                    text: 'Undo'\n                },\n                message: 'Event deleted'\n            });\n        });\n    }, [myEvents]);\n\n    const loadPopupForm = React.useCallback((event) => {\n        setTitle(event.title);\n        setDescription(event.description);\n        setDate([event.start, event.end]);\n        setAllDay(event.allDay || false);\n        setStatus(event.status || 'busy');\n    }, []);\n\n    // handle popup form changes\n\n    const titleChange = React.useCallback((ev) => {\n        setTitle(ev.target.value);\n    }, []);\n\n    const descriptionChange = React.useCallback((ev) => {\n        setDescription(ev.target.value);\n    }, []);\n\n    const allDayChange = React.useCallback((ev) => {\n        setAllDay(ev.target.checked);\n    }, []);\n\n    const dateChange = React.useCallback((args) => {\n        setDate(args.value);\n    }, []);\n\n    const statusChange = React.useCallback((ev) => {\n        setStatus(ev.target.value);\n    }, []);\n\n    const onDeleteClick = React.useCallback(() => {\n        deleteEvent(tempEvent);\n        setOpen(false);\n    }, [deleteEvent, tempEvent]);\n\n    // scheduler options\n\n    const onSelectedDateChange = React.useCallback((event) => {\n        setSelectedDate(event.date);\n    }, []);\n\n    const onEventClick = React.useCallback((args) => {\n        setEdit(true);\n        setTempEvent({ ...args.event });\n        // fill popup form with event data\n        loadPopupForm(args.event);\n        setAnchor(args.domEvent.target);\n        setOpen(true);\n    }, [loadPopupForm]);\n\n    const onEventCreated = React.useCallback((args) => {\n        setEdit(false);\n        setTempEvent(args.event)\n        // fill popup form with event data\n        loadPopupForm(args.event);\n        setAnchor(args.target);\n        // open the popup\n        setOpen(true);\n    }, [loadPopupForm]);\n\n    const onEventDeleted = React.useCallback((args) => {\n        deleteEvent(args.event)\n    }, [deleteEvent]);\n\n    const onEventUpdated = React.useCallback((args) => {\n        // here you can update the event in your storage as well, after drag & drop or resize\n        // ...\n    }, []);\n\n    // datepicker options\n    const controls = React.useMemo(() => popupEventAllDay ? ['date'] : ['datetime'], [popupEventAllDay]);\n    const responsiveOptions = React.useMemo(() => popupEventAllDay ? {\n        medium: {\n            controls: ['calendar'],\n            touchUi: false\n        }\n    } : {\n            medium: {\n                controls: ['calendar', 'time'],\n                touchUi: false\n            }\n        }, [popupEventAllDay]);\n\n    // popup options\n    const headerText = React.useMemo(() => isEdit ? 'Edit event' : 'New Event', [isEdit]);\n    const popupButtons = React.useMemo(() => {\n        if (isEdit) {\n            return ['cancel', {\n                handler: () => {\n                    saveEvent();\n                },\n                keyCode: 'enter',\n                text: 'Save',\n                cssClass: 'mbsc-popup-button-primary'\n            }];\n        } else {\n            return ['cancel', {\n                handler: () => {\n                    saveEvent();\n                },\n                keyCode: 'enter',\n                text: 'Add',\n                cssClass: 'mbsc-popup-button-primary'\n            }];\n        }\n    }, [isEdit, saveEvent]);\n\n    const onClose = React.useCallback(() => {\n        if (!isEdit) {\n            // refresh the list, if add popup was canceled, to remove the temporary event\n            setMyEvents([...myEvents]);\n        }\n        setOpen(false);\n    }, [isEdit, myEvents]);\n\n    \n\n    React.useEffect(() => {\n        getJson('https://trial.mobiscroll.com/events/?vers=5', (events) => {\n            setEvents(events);\n        }, 'jsonp');\n    }, []);\n\n    React.useEffect(() => {\n        getJson('https://trial.mobiscroll.com//workday-events/?vers=5', (events) => {\n          setEvents(events);\n      }, 'jsonp');\n    }, []);\n\n    const [calView, setCalView] = React.useState(\n        {\n            calendar: { labels: true }\n        }\n    );\n\n    const changeView = (event) => {\n        let calView;\n        \n        switch (event.target.value) {\n            case 'month':\n                calView = {\n                    calendar: { labels: true }\n                }\n                break;\n            case 'week':\n                calView = {\n                    schedule: { type: 'week' }\n                }\n                break;\n            case 'day':\n                calView = {\n                    schedule: { type: 'day' }\n                }\n                break;\n        }\n\n        setView(event.target.value);\n        setCalView(calView);\n    }\n    \n    const customWithNavButtons = () => {\n        return <React.Fragment>\n            <CalendarNav className=\"cal-header-nav\" />\n            <div className=\"cal-header-picker\">\n                <SegmentedGroup value={view} onChange={changeView}>\n                    <SegmentedItem value=\"month\" style=\"height:50px\">\n                        Month\n                    </SegmentedItem>\n                    <SegmentedItem value=\"week\" style=\"height:50px\">\n                        Week\n                    </SegmentedItem>\n                    <SegmentedItem value=\"day\" style=\"height:50px\">\n                        Day\n                    </SegmentedItem>\n                </SegmentedGroup>\n            </div>\n            <CalendarPrev className=\"cal-header-prev\" />\n            <CalendarToday className=\"cal-header-today\" />\n            <CalendarNext className=\"cal-header-next\" />\n        </React.Fragment>;\n    }\n\n    return (\n      <div className=\"md-switching-view-cont\">\n        <Eventcalendar\n          theme=\"ios\" \n          themeVariant=\"light\"\n          dragToMove={true}\n          dragToResize={true}\n          data={myEvents}\n          view={view}\n          view={viewSettings}\n          clickToCreate=\"double\"\n          dragToCreate={true}\n          selectedDate={mySelectedDate}\n          onSelectedDateChange={onSelectedDateChange}\n          onEventClick={onEventClick}\n          onEventCreated={onEventCreated}\n          onEventDeleted={onEventDeleted}\n          onEventUpdated={onEventUpdated}\n          renderHeader={customWithNavButtons}\n          height={750}\n          view={calView}\n        />\n        <Popup\n            display=\"bottom\"\n            fullScreen={true}\n            contentPadding={false}\n            headerText={headerText}\n            anchor={anchor}\n            buttons={popupButtons}\n            isOpen={isOpen}\n            onClose={onClose}\n            responsive={responsivePopup}\n        >\n            <div className=\"mbsc-form-group\">\n                <Input label=\"Title\" value={popupEventTitle} onChange={titleChange} />\n                <Textarea label=\"Description\" value={popupEventDescription} onChange={descriptionChange} />\n            </div>\n            <div className=\"mbsc-form-group\">\n                <Switch label=\"All-day\" checked={popupEventAllDay} onChange={allDayChange} />\n                <Input ref={startRef} label=\"Starts\" />\n                <Input ref={endRef} label=\"Ends\" />\n                <Datepicker\n                    select=\"range\"\n                    controls={controls}\n                    touchUi={true}\n                    startInput={start}\n                    endInput={end}\n                    showRangeLabels={false}\n                    responsive={responsiveOptions}\n                    onChange={dateChange}\n                    value={popupEventDate}\n                />\n                <SegmentedGroup onChange={statusChange}>\n                    <SegmentedItem value=\"busy\" checked={popupEventStatus === 'busy'}>Show as busy</SegmentedItem>\n                    <SegmentedItem value=\"free\" checked={popupEventStatus === 'free'}>Show as free</SegmentedItem>\n                </SegmentedGroup>\n                {isEdit && <div className=\"mbsc-button-group\">\n                    <Button className=\"mbsc-button-block\" color=\"danger\" variant=\"outline\" onClick={onDeleteClick}>Delete event</Button>\n                </div>}\n            </div>\n        </Popup>\n      </div>\n    ); \n}\n\n\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}